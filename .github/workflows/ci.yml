name: CI with Coverage
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: write 
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint

      - name: Run tests and generate coverage report
        run: |
          coverage run -m unittest discover
          coverage xml -o cobertura.xml
          coverage report -m > coverage_report.txt

      - name: Run Pylint and generate text report
        run: |
          # Generar el reporte de texto (formato estandarizado 'text')
          pylint backgammon --rcfile=.pylintrc -f text > pylint_report.txt
          
          # Generar el reporte XML para CodeClimate (el || true asegura que el paso no falle si Pylint no lo genera)
          pylint backgammon --rcfile=.pylintrc --output-format=pylintxml > pylint.xml || true 
        
        continue-on-error: true

      - name: Generate reports file
        run: |
          # Script para generar REPORTS.md (asumiendo que el contenido es el que ya preparamos)
          cat << 'EOF' > generate_reports.py
          import os
          def read_file(filepath):
              if not os.path.exists(filepath):
                  return f"File not generated at {filepath}"
              try:
                  with open(filepath, "r", encoding="utf-8") as f:
                      return f.read()
              except Exception as e:
                  return f"Error reading file {filepath}: {e}"
                  
          coverage_report = read_file("coverage_report.txt")
          pylint_report = read_file("pylint_report.txt")
          reports_content = f"""# Automated Reports
          ## Coverage Report
          ```text
          {coverage_report}
          ```
          ## Pylint Report
          ```text
          {pylint_report}
          ```
          """
          with open("REPORTS.md", "w", encoding="utf-8") as f:
              f.write(reports_content)
          EOF
          python generate_reports.py

      - name: Commit and Push Reports
        if: success() || failure()
        run: |
          git config user.name 'GitHub Actions Report'
          git config user.email 'github-actions@github.com'
          
          # AÃ±adir todos los reportes finales
          git add REPORTS.md cobertura.xml pylint.xml
          
          # Confirmar y pushear los cambios a la rama actual
          git commit -m "docs: Update Automated CI Reports [skip ci]" || echo "No changes to commit"
          git push